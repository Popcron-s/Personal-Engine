#version 430 core

//layout(early_fragment_tests) in;

layout(rgba32ui) coherent uniform uimageBuffer imgAbuffer;
layout(r32ui) coherent uniform uimage2D imgListHead;

layout(binding = 0, offset = 0) uniform atomic_uint counter;

uniform sampler2D textures[16];

in VS_OUT{
	vec4 posCoord;
	vec2 texCoord;
	vec4 fragColor;
	flat uint width;
	flat uint height;

	vec3 light;
	flat uint diffuse_map;
	flat uint normal_map;
	flat uint height_map;
}vs_out;
out vec4 out_color;

void main(){
	vec3 normal = vec3(0.0, 0.0, 0.0);
	float specular = 0.0;
	vec4 color = vs_out.fragColor;
	if(textureSize(textures[vs_out.normal_map], 0).x > 1){
		normal = texture2D(textures[vs_out.normal_map], vs_out.texCoord).xyz;
		normal = normal * 2.0 - 1.0;
		color *= max(dot(vs_out.light, normal), 0.0);

		vec3 reflect_light = reflect(-vs_out.light, normal);
		specular = pow(max(dot(reflect_light, vec3(0.0, 0.0, 1.0)), 0.0), 64);
	}
	if(textureSize(textures[vs_out.diffuse_map], 0).x > 1){color *= texture2D(textures[vs_out.diffuse_map], vs_out.texCoord);}

	color.xyz += specular;

	ivec2 icoord = ivec2((vs_out.posCoord.x+1.0)*0.5 * vs_out.width, (vs_out.posCoord.y+1.0)*0.5 * vs_out.height);
	uvec2 fragment = uvec2(packUnorm4x8(color), floatBitsToUint(vs_out.posCoord.z));

	uint idx = atomicCounterIncrement(counter)+1u;
	
	if(idx < imageSize(imgAbuffer)){
		uint prev = imageAtomicExchange(imgListHead, icoord, int(idx));
		imageStore(imgAbuffer, int(idx), uvec4(fragment, 0, prev));
	}
	
	//out_color = color;
	//out_color = vec4(1.0, 0.0, 0.0, 1.0);
}