#version 430 core

//layout(early_fragment_tests) in;

layout(rgba32ui) coherent uniform uimageBuffer imgAbuffer;
layout(r32ui) coherent uniform uimage2D imgListHead;

layout(binding = 0, offset = 0) uniform atomic_uint counter;

layout(std430, binding = 2) buffer TEX_BUFFER{
	uvec4 g_buf[];
};

in VS_OUT{
	vec4 posCoord;
	vec2 texCoord;
	vec4 fragColor;
	flat uint width;
	flat uint height;
}vs_out;

in GLYPH_OUT{
	vec4 posOrigin;
	vec4 solid_color;
	vec4 outline_color;
	float outline_size;
	flat uint buf_size;
	flat uint offset;
	flat uint obj_idx;
}g_out;

float min_outline_size;

out vec4 out_color;

uint GetData(inout uint idx){
	uint high_idx = idx/4;
	uint low_idx = idx%4;
	
	uint result = 0;
	
	switch(low_idx){
	case 0:	result = g_buf[high_idx].x;	break;
	case 1:	result = g_buf[high_idx].y;	break;
	case 2:	result = g_buf[high_idx].z;	break;
	case 3:	result = g_buf[high_idx].w;	break;
	}

	++idx;

	return result;
}

float DrawLine(vec2 p, vec2 to){
	float c = 0.0;
	vec2 axis = to - p;
	vec2 pos = g_out.posOrigin.xy - p;
	float len = length(axis);
	axis = normalize(axis);
	float rCheck = dot(axis, pos);
	if(rCheck > len){return clamp(smoothstep(g_out.outline_size, min_outline_size, length(to-g_out.posOrigin.xy)), 0.0, 1.0);}
	else if(0.0 > rCheck){return clamp(smoothstep(g_out.outline_size, min_outline_size, length(p-g_out.posOrigin.xy)), 0.0, 1.0);}
	float dotAP = abs(dot(vec2(-axis.y, axis.x), pos));
	if(dotAP < g_out.outline_size){c = smoothstep(g_out.outline_size, min_outline_size, dotAP);}
	return clamp(c, 0.0, 1.0);
}

float WindingNumber(vec2 p0, vec2 p1){
	p0 -= g_out.posOrigin.xy;
	p1 -= g_out.posOrigin.xy;

	float r = 0.0;

	float t_x = 0.0;
	float t_y = p0.y*p1.y;
	float sign = p0.x*p1.y-p0.y*p1.x;
	sign = (sign<0.0)?1.0:-1.0;
	
	if(p0.y == p1.y){return 0.0;}
	else if(p0.x == p1.x){t_x = p0.x;}
	else{t_x = p0.x - p0.y*(p1.x-p0.x)/(p1.y-p0.y);}

	if(t_y > 0.0){r = 0.0;}
	else if(t_y == 0.0){r = (t_x<0.0)?0.0:0.5;}
	else{r = (t_x<0.0)?0.0:1.0;}
	
	return r*sign;
}

vec4 DrawGlyph(){
	float c = 0.0;

	uint g_idx = g_out.offset/4;

	uint cont = 0;
	uint cont_num = GetData(g_idx);

	uint c_idx = g_idx;
	uint p_idx = c_idx+cont_num;

	int j = 0;
	vec2 first_p = vec2(0.0, 0.0);
	vec2 prev_p = vec2(0.0, 0.0);
	vec2 cur_p = vec2(0.0, 0.0);

	float wn = 0.0;

	uint t = 0;

	for(int i = 0 ; i<cont_num ; ++i){
		cont = GetData(c_idx);

		t = GetData(p_idx);	first_p.x = uintBitsToFloat(t);
		t = GetData(p_idx); first_p.y = uintBitsToFloat(t);
		prev_p = first_p;

		++j;

		for( ; j<=cont ; ++j){
			t = GetData(p_idx);	cur_p.x = uintBitsToFloat(t);
			t = GetData(p_idx); cur_p.y = uintBitsToFloat(t);

			if(c != 1.0){c = max(c, DrawLine(prev_p, cur_p));}
			wn += WindingNumber(prev_p, cur_p);
			prev_p = cur_p;
		}

		if(c != 1.0){c = max(c, DrawLine(prev_p, first_p));}
		wn += WindingNumber(prev_p, first_p);
	}

	//if(int(wn)%2 == 1){return g_out.solid_color;}
	if(wn>0.0){return g_out.solid_color;}
	else{return g_out.outline_color*c;}
}

void main(){
	min_outline_size = g_out.outline_size*0.6;
	vec4 glyph_color = DrawGlyph();
	vec4 color = glyph_color*vs_out.fragColor;
	ivec2 icoord = ivec2((vs_out.posCoord.x+1.0)*0.5 * vs_out.width, (vs_out.posCoord.y+1.0)*0.5 * vs_out.height);
	uvec2 fragment = uvec2(packUnorm4x8(color), floatBitsToUint(vs_out.posCoord.z));

	if(color.a == 0.0){return;}

	uint idx = atomicCounterIncrement(counter)+1u;
	
	if(idx < imageSize(imgAbuffer)){
		uint prev = imageAtomicExchange(imgListHead, icoord, int(idx));
		imageStore(imgAbuffer, int(idx), uvec4(fragment, g_out.obj_idx, prev));
	}
	
	//out_color = color;
	//out_color = vec4(1.0, 0.0, 0.0, 1.0);
}