#version 430 core
layout(location = 0) in vec4 pos;
layout(location = 1) in vec4 color;
layout(location = 2) in vec2 tex;
layout(location = 3) in vec3 normal;
layout(location = 4) in uint obj_idx;

struct UNIFORM{
	mat4 world;
	vec3 light;
	uint diffuse;
	uint normal;
	uint height;
};

struct SCREEN_UNIFORM{
	mat4 view;
	mat4 proj;
	uint width;
	uint height;
};

layout(std430, binding = 0) buffer OBJECT{
	UNIFORM uni[];
};

layout(std430, binding = 1) buffer SCREEN{
	SCREEN_UNIFORM scr;
};

out VS_OUT{
	vec4 posCoord;
	vec2 texCoord;
	vec4 fragColor;
	flat uint width;
	flat uint height;

	vec3 light;
	flat uint diffuse_map;
	flat uint normal_map;
	flat uint height_map;
}vs_out;

void main(){
	mat4 wvp = scr.proj*scr.view*uni[obj_idx].world;
	vec4 t_pos = wvp*pos;
	gl_Position = t_pos/t_pos.w;
	vs_out.posCoord = t_pos/t_pos.w;
	vs_out.texCoord = tex;
	vs_out.fragColor = color;
	vs_out.width = scr.width;
	vs_out.height = scr.height;

	vs_out.light = uni[obj_idx].light;
	vs_out.diffuse_map = uni[obj_idx].diffuse;
	vs_out.normal_map = uni[obj_idx].normal;
	vs_out.height_map = uni[obj_idx].height;
}